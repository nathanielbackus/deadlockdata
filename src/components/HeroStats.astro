---
import { heroNames } from './heroNames.mjs';

let heroStats = [];
let error = null;
let sortOrder = 'asc'; // Default sort order

try {
  const response = await fetch('https://analytics.deadlock-api.com/v2/hero-win-loss-stats');
  if (!response.ok) throw new Error("Failed to fetch data");

  const data = await response.json();

  heroStats = Array.isArray(data) ? data : [];
} catch (err) {
  error = err;
}

function winrate(wins, matches) {
  const rate = (wins / matches) * 100;
  return `${rate.toFixed(2)}%`;
}

function pickrate(matches, allMatches) {
  const rate = (matches / allMatches) * 100;
  return `${rate.toFixed(2)}%`;
}
---

<h2>All Heroes Win/Loss Statistics</h2>

{error ? (
  <p style="color: red;">Error: {error}</p>
) : heroStats.length > 0 ? (
  <table class ="table">
    <thead>
      <tr>
        <th>Hero</th>
        <th onClick={() => sortStats('wins')}>Winrate</th>
        <th onClick={() => sortStats('matches')}>Pickrate</th>
        <th>Weak Against</th>
      </tr>
    </thead>
    <tbody>
      {heroStats.map((hero) => (
        <tr key={hero.hero_id}>
          <td>
            <a href={`/heroes/${hero.hero_id}`}>
              {heroNames[hero.hero_id] || `Unknown Hero (${hero.hero_id})`}
            </a>
          </td>
          <td>{winrate(hero.wins, hero.matches)}</td>
          <td>{pickrate(hero.matches, heroStats.reduce((acc, h) => acc + h.matches, 0))}</td>
          <td>extra data</td>
        </tr>
      ))}
    </tbody>
  </table>
  <script src = "./src/tablesort.js"></script>
) : (
  <p>No data available</p>
)}